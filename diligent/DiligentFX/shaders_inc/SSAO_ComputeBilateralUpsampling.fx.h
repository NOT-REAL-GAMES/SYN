"#include \"SSAO_Common.fxh\"\n"
"#include \"PostFX_Common.fxh\"\n"
"#include \"BasicStructures.fxh\"\n"
"#include \"ScreenSpaceAmbientOcclusionStructures.fxh\"\n"
"#include \"FullScreenTriangleVSOutput.fxh\"\n"
"\n"
"#pragma warning(disable : 3078)\n"
"\n"
"cbuffer cbCameraAttribs\n"
"{\n"
"    CameraAttribs g_Camera;\n"
"}\n"
"\n"
"cbuffer cbScreenSpaceAmbientOcclusionAttribs\n"
"{\n"
"    ScreenSpaceAmbientOcclusionAttribs g_SSAOAttribs;\n"
"}\n"
"\n"
"Texture2D<float> g_TextureDepth;\n"
"Texture2D<float> g_TextureOcclusion;\n"
"\n"
"SamplerState g_TextureDepth_sampler;\n"
"SamplerState g_TextureOcclusion_sampler;\n"
"\n"
"float SampleDepth(int2 Location)\n"
"{\n"
"    return g_TextureDepth.Load(int3(Location, 0));\n"
"}\n"
"\n"
"float SampleOcclusion(int2 Location)\n"
"{\n"
"    return g_TextureOcclusion.Load(int3(Location, 0));\n"
"}\n"
"\n"
"float SampleOcclusionLinear(float2 Texcoord)\n"
"{\n"
"    return g_TextureOcclusion.SampleLevel(g_TextureOcclusion_sampler, Texcoord, 0.0);\n"
"}\n"
"\n"
"float SampleDepthLinear(float2 Texcoord)\n"
"{\n"
"    return g_TextureDepth.SampleLevel(g_TextureDepth_sampler, Texcoord, 0.0);\n"
"}\n"
"\n"
"float ComputeBilateralUpsamplingPS(in FullScreenTriangleVSOutput VSOut) : SV_Target0\n"
"{\n"
"    float2 Position = VSOut.f4PixelPos.xy;\n"
"    float CenterDepth = SampleDepth(int2(Position));\n"
"    if (IsBackground(CenterDepth))\n"
"       return 1.0;\n"
"\n"
"    /*\n"
"    // Alternative version with 4 samples\n"
"    float OcclusionSum = 0.0;\n"
"    float WeightSum = 0.0;\n"
"\n"
"    float2 HalfPosition = 0.5 * Position;\n"
"    int2 HalfPositioni = int2(HalfPosition - 0.5);\n"
"\n"
"    float x = frac(HalfPosition + 0.5);\n"
"    float y = frac(HalfPosition + 0.5);\n"
"\n"
"    float4 Weight;\n"
"    Weight.x = (1.0 - x) * (1.0 - y);\n"
"    Weight.y = x * (1.0 - y);\n"
"    Weight.z = (1.0 - x) * y;\n"
"    Weight.w = x * y;\n"
"\n"
"    for (int SampleIdx = 0; SampleIdx < 4; SampleIdx++)\n"
"    {\n"
"        int2 Location = HalfPositioni + int2(SampleIdx & 0x01, SampleIdx >> 1);\n"
"\n"
"        float SampledSignal = SampleOcclusion(Location);\n"
"        float SampledGuided = SampleDepthLinear(2.0 * (float2(Location) + 0.5) * g_Camera.f4ViewportSize.zw);\n"
"\n"
"        float WeightS = Weight[SampleIdx];\n"
"        float WeightZ = ComputeDepthWeight(CenterDepth, SampledGuided, g_Camera.mProj, SSAO_BILATERAL_UPSAMPLING_DEPTH_SIGMA);\n"
"        OcclusionSum += SampledSignal * WeightS * WeightZ;\n"
"        WeightSum += WeightS *  WeightZ;\n"
"    }\n"
"    */\n"
"\n"
"    // We need to add half a pixel offset relative to the half-res texture\n"
"    //float2 Location = floor(Position) * g_Camera.f4ViewportSize.zw\n"
"    //float2 Texcoord = floor(Position) * g_Camera.f4ViewportSize.zw + g_Camera.f4ViewportSize.zw;\n"
"\n"
"    int2 CenterLocation = int2(0.5 * floor(Position.xy));\n"
"\n"
"    float OcclusionSum = 0.0;\n"
"    float WeightSum = 0.0;\n"
"\n"
"    const int UpsamplingRadius = 1;\n"
"    for (int x = -UpsamplingRadius; x <= UpsamplingRadius; x++)\n"
"    {\n"
"        for (int y = -UpsamplingRadius; y <= UpsamplingRadius; y++)\n"
"        {\n"
"            int2 Location = ClampScreenCoord(CenterLocation + int2(x, y), int2(0.5 * g_Camera.f4ViewportSize.xy));\n"
"            float2 Texcoord = 2.0 * (float2(Location) + 0.5) * g_Camera.f4ViewportSize.zw;\n"
"\n"
"            float SampledSignal = SampleOcclusion(Location);\n"
"            float SampledGuided = SampleDepthLinear(Texcoord);\n"
"            float WeightS = ComputeSpatialWeight(float(x * x + y * y), SSAO_BILATERAL_UPSAMPLING_SIGMA);\n"
"            float WeightZ = ComputeDepthWeight(CenterDepth, SampledGuided, g_Camera.mProj, SSAO_BILATERAL_UPSAMPLING_DEPTH_SIGMA);\n"
"\n"
"            OcclusionSum += WeightS * WeightZ * SampledSignal;\n"
"            WeightSum += WeightS * WeightZ;\n"
"        }\n"
"    }\n"
"\n"
"    return WeightSum > 0.0 ? OcclusionSum / WeightSum : SampleOcclusionLinear(2.0 * (float2(CenterLocation) + 0.5) * g_Camera.f4ViewportSize.zw);\n"
"}\n"
