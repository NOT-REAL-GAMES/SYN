"#include \"BasicStructures.fxh\"\n"
"#include \"FullScreenTriangleVSOutput.fxh\"\n"
"#include \"PostFX_Common.fxh\"\n"
"#include \"TemporalAntiAliasingStructures.fxh\"\n"
"#include \"ScreenSpaceAmbientOcclusionStructures.fxh\"\n"
"#include \"SSAO_Common.fxh\"\n"
"\n"
"cbuffer cbCameraAttribs\n"
"{\n"
"    CameraAttribs g_Camera;\n"
"}\n"
"\n"
"Texture2D<float>  g_TextureOcclusion;\n"
"Texture2D<float>  g_TextureDepth;\n"
"Texture2D<float>  g_TextureHistory;\n"
"Texture2D<float3> g_TextureNormal;\n"
"\n"
"SamplerState g_TextureDepth_sampler;\n"
"SamplerState g_TextureOcclusion_sampler;\n"
"\n"
"float SampleOcclusion(int2 PixelCoord, int MipLevel)\n"
"{\n"
"    return g_TextureOcclusion.Load(int3(PixelCoord, MipLevel));\n"
"}\n"
"\n"
"float SampleDepth(int2 PixelCoord, int MipLevel)\n"
"{\n"
"    return g_TextureDepth.Load(int3(PixelCoord, MipLevel));\n"
"}\n"
"\n"
"float2 GetMipResolution(float2 ScreenDimensions, int MipLevel)\n"
"{\n"
"    return ScreenDimensions * rcp(float(1 << MipLevel));\n"
"}\n"
"\n"
"float SampleDepthLinear(float2 Texcoord, int MipLevel)\n"
"{\n"
"    return g_TextureDepth.SampleLevel(g_TextureDepth_sampler, Texcoord, MipLevel);\n"
"}\n"
"\n"
"float SampleOcclusionPoint(float2 Texcoord, int MipLevel)\n"
"{\n"
"    return g_TextureOcclusion.SampleLevel(g_TextureOcclusion_sampler, Texcoord, MipLevel);\n"
"}\n"
"\n"
"float SampleHistory(int2 PixelCoord)\n"
"{\n"
"    return g_TextureHistory.Load(int3(PixelCoord, 0));\n"
"}\n"
"\n"
"float3 SampleNormalWS(int2 PixelCoord)\n"
"{\n"
"    return g_TextureNormal.Load(int3(PixelCoord, 0));\n"
"}\n"
"\n"
"float ComputeResampledHistoryPS(in FullScreenTriangleVSOutput VSOut) : SV_Target0\n"
"{\n"
"    float4 Position = VSOut.f4PixelPos;\n"
"    float Depth = SampleDepth(int2(Position.xy), 0);\n"
"    float History = SampleHistory(int2(Position.xy));\n"
"    float AccumulationFactor = (History - 1.0) / float(SSAO_OCCLUSION_HISTORY_MAX_FRAMES_WITH_HISTORY_FIX);\n"
"\n"
"    if (IsBackground(Depth) || AccumulationFactor >= 1.0)\n"
"        return SampleOcclusion(int2(Position.xy), 0);\n"
"\n"
"    int MipLevel = int(float(SSAO_DEPTH_HISTORY_CONVOLUTED_MAX_MIP) * (1.0 - saturate(AccumulationFactor)));\n"
"    float3 PositionSS = float3(Position.xy * g_Camera.f4ViewportSize.zw, Depth);\n"
"    float3 PositionVS = ScreenXYDepthToViewSpace(PositionSS, g_Camera.mProj);\n"
"    float3 NormalVS = mul(float4(SampleNormalWS(int2(Position.xy)), 0.0), g_Camera.mView).xyz;\n"
"    float PlaneNormalFactor = 10.0 / (1.0 + DepthToCameraZ(Depth, g_Camera.mProj));\n"
"\n"
"    float OcclusionSum = 0.0;\n"
"    float WeightSum = 0.0;\n"
"\n"
"    while (MipLevel >= 0 && WeightSum < 0.995) {\n"
"\n"
"        float2 MipResolution = GetMipResolution(g_Camera.f4ViewportSize.xy, MipLevel);\n"
"        float2 MipLocation = Position.xy * rcp(float(1 << MipLevel));\n"
"\n"
"        int2 MipLocationi = int2(MipLocation - 0.5);\n"
"        float x = frac(MipLocation.x + 0.5);\n"
"        float y = frac(MipLocation.y + 0.5);\n"
"\n"
"        float Weight[4];\n"
"        Weight[0] = (1.0 - x) * (1.0 - y);\n"
"        Weight[1] = x * (1.0 - y);\n"
"        Weight[2] = (1.0 - x) * y;\n"
"        Weight[3] = x * y;\n"
"\n"
"        OcclusionSum = 0.0;\n"
"        WeightSum = 0.0;\n"
"\n"
"        for (int SampleIdx = 0; SampleIdx < 4; SampleIdx++)\n"
"        {\n"
"            int2 Location = MipLocationi + int2(SampleIdx & 0x01, SampleIdx >> 1);\n"
"            float2 Texcoord = (float2(Location) + 0.5) * rcp(MipResolution);\n"
"\n"
"            float SampledDepth = SampleDepthLinear(Texcoord, MipLevel);\n"
"            float SampledOcclusion = SampleOcclusionPoint(Texcoord, MipLevel);\n"
"\n"
"            float3 SamplePositionSS = float3(Texcoord, SampledDepth);\n"
"            float3 SamplePositionVS = ScreenXYDepthToViewSpace(SamplePositionSS, g_Camera.mProj);\n"
"\n"
"            float WeightS = Weight[SampleIdx];\n"
"            float WeightZ = ComputeGeometryWeight(PositionVS, SamplePositionVS, NormalVS, PlaneNormalFactor);\n"
"\n"
"            OcclusionSum += SampledOcclusion * WeightS * WeightZ;\n"
"            WeightSum += WeightS * WeightZ;\n"
"        }\n"
"\n"
"        MipLevel--;\n"
"    }\n"
"\n"
"    return OcclusionSum / WeightSum;\n"
"}\n"
