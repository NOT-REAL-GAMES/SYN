"#include \"FullScreenTriangleVSOutput.fxh\"\n"
"#include \"DepthOfFieldStructures.fxh\"\n"
"#include \"PostFX_Common.fxh\"\n"
"#include \"BasicStructures.fxh\"\n"
"\n"
"cbuffer cbCameraAttribs\n"
"{\n"
"    CameraAttribs g_Camera;\n"
"}\n"
"\n"
"cbuffer cbDepthOfFieldAttribs\n"
"{\n"
"    DepthOfFieldAttribs g_DOFAttribs;\n"
"}\n"
"\n"
"Texture2D<float4> g_TextureColorCoC;\n"
"SamplerState      g_TextureColorCoC_sampler;\n"
"\n"
"float ComputeWeigh(float CoC, float Radius)\n"
"{\n"
"	return saturate((CoC - Radius + 2.0) / 2.0);\n"
"}\n"
"\n"
"float4 SampleColor(float2 Texcoord, float2 Offset)\n"
"{\n"
"    return g_TextureColorCoC.SampleLevel(g_TextureColorCoC_sampler, Texcoord + Offset, 0.0);\n"
"}\n"
"\n"
"float4 ComputeBokehPS(in FullScreenTriangleVSOutput VSOut) : SV_Target0\n"
"{\n"
"	// rings = 3\n"
"	// points per ring = 7\n"
"	// https://github.com/Unity-Technologies/Graphics/blob/master/com.unity.postprocessing/PostProcessing/Shaders/Builtins/DiskKernels.hlsl\n"
"    float2 Kernel[DOF_KERNEL_SAMPLE_COUNT];\n"
"	Kernel[0]  = float2(0.0, 0.0);\n"
"	Kernel[1]  = float2(0.53333336, 0.0);\n"
"	Kernel[2]  = float2(0.3325279, 0.4169768);\n"
"	Kernel[3]  = float2(-0.11867785, 0.5199616);\n"
"	Kernel[4]  = float2(-0.48051673, 0.2314047);\n"
"	Kernel[5]  = float2(-0.48051673, -0.23140468);\n"
"	Kernel[6]  = float2(-0.11867763, -0.51996166);\n"
"	Kernel[7]  = float2(0.33252785, -0.4169769);\n"
"	Kernel[8]  = float2(1.0, 0.0);\n"
"	Kernel[9]  = float2(0.90096885, 0.43388376);\n"
"	Kernel[10] = float2(0.6234898, 0.7818315);\n"
"	Kernel[11] = float2(0.22252098, 0.9749279);\n"
"	Kernel[12] = float2(-0.22252095, 0.9749279);\n"
"	Kernel[13] = float2(-0.62349, 0.7818314);\n"
"	Kernel[14] = float2(-0.90096885, 0.43388382);\n"
"	Kernel[15] = float2(-1.0, 0.0);\n"
"	Kernel[16] = float2(-0.90096885, -0.43388376);\n"
"	Kernel[17] = float2(-0.6234896, -0.7818316);\n"
"	Kernel[18] = float2(-0.22252055, -0.974928);\n"
"	Kernel[19] = float2(0.2225215, -0.9749278);\n"
"	Kernel[20] = float2(0.6234897, -0.7818316);\n"
"	Kernel[21] = float2(0.90096885, -0.43388376);\n"
"\n"
"    float2 CenterTexcoord = NormalizedDeviceXYToTexUV(VSOut.f2NormalizedXY.xy);\n"
"    float CoC = g_TextureColorCoC.SampleLevel(g_TextureColorCoC_sampler, CenterTexcoord, 0.0).a;\n"
"\n"
"	float4 BackgroudColor = float4(0.0, 0.0, 0.0, 0.0);\n"
"	float4 ForegroundColor = float4(0.0, 0.0, 0.0, 0.0);\n"
"\n"
"	for (int SampleIdx = 0; SampleIdx < DOF_KERNEL_SAMPLE_COUNT; SampleIdx++)\n"
"    {\n"
"		float2 SamplePosition = Kernel[SampleIdx] * g_DOFAttribs.BokehRadius;\n"
"		float4 SampledColor = SampleColor(CenterTexcoord, 2.0 * g_Camera.f4ViewportSize.zw * SamplePosition);\n"
"		float Radius = length(SamplePosition);\n"
"\n"
"		float BackgroudWeight  = ComputeWeigh(max(0.0, min(SampledColor.a, CoC)), Radius);\n"
"		float ForegroundWeight = ComputeWeigh(-SampledColor.a, Radius);\n"
"\n"
"		BackgroudColor.xyz += SampledColor.rgb * BackgroudWeight;\n"
"		BackgroudColor.w   += BackgroudWeight;\n"
"\n"
"		ForegroundColor.xyz += SampledColor.rgb * ForegroundWeight;\n"
"		ForegroundColor.w   += ForegroundWeight;\n"
"	}\n"
"\n"
"	BackgroudColor.xyz  *= 1.0 / (BackgroudColor.w  + float(BackgroudColor.w  == 0.0));\n"
"	ForegroundColor.xyz *= 1.0 / (ForegroundColor.w + float(ForegroundColor.w == 0.0));\n"
"\n"
"	float Alpha = min(1.0, ForegroundColor.w * M_PI / float(DOF_KERNEL_SAMPLE_COUNT));\n"
"	float3 Color = lerp(BackgroudColor.xyz, ForegroundColor.xyz, Alpha);\n"
"	return float4(Color, Alpha);\n"
"}\n"
