"#include \"SSAO_Common.fxh\"\n"
"#include \"PostFX_Common.fxh\"\n"
"#include \"FullScreenTriangleVSOutput.fxh\"\n"
"\n"
"#if SUPPORTED_SHADER_SRV\n"
"Texture2D g_TextureHistoryLastMip;\n"
"Texture2D g_TextureDepthLastMip;\n"
"#else\n"
"Texture2D g_TextureHistoryMips;\n"
"Texture2D g_TextureDepthMips;\n"
"SamplerState g_TextureHistoryMips_sampler;\n"
"SamplerState g_TextureDepthMips_sampler;\n"
"#endif // SUPPORTED_SHADER_SRV\n"
"\n"
"struct PSOutput\n"
"{\n"
"    float History : SV_Target0;\n"
"    float Depth   : SV_Target1;\n"
"};\n"
"\n"
"#if SUPPORTED_SHADER_SRV\n"
"float SampleFromTexture(Texture2D SampledTexture, int2 Location, int2 Offset, int3 Dimension)\n"
"{\n"
"    int2 Position = ClampScreenCoord(Location + Offset, Dimension.xy);\n"
"    return SampledTexture.Load(int3(Position, 0)).x;\n"
"}\n"
"#else\n"
"float SampleFromTexture(Texture2D SampledTexture, int2 Location, int2 Offset, int3 Dimension)\n"
"{\n"
"    int2 Position = ClampScreenCoord(Location + Offset, Dimension.xy);\n"
"    return SampledTexture.Load(int3(Position, Dimension.z)).x;\n"
"}\n"
"#endif // SUPPORTED_SHADER_SRV\n"
"\n"
"float ComputeAverage(in float SampledValues[9], uint Count)\n"
"{\n"
"    float Result = 0.0f;\n"
"    for (uint Idx = 0u; Idx < Count; Idx++)\n"
"        Result += SampledValues[Idx];\n"
"\n"
"    return Result / float(Count);\n"
"}\n"
"\n"
"void ArrayAppend(float Element, inout float Array[9], inout uint Index)\n"
"{\n"
"    Array[Index] = Element;\n"
"    Index++;\n"
"}\n"
"\n"
"float ComputeAverageForTexture(Texture2D SampledTexture, int2 RemappedPosition, int MipLevel) {\n"
"\n"
"    int3 LastMipDimension;\n"
"#if SUPPORTED_SHADER_SRV\n"
"    SampledTexture.GetDimensions(LastMipDimension.x, LastMipDimension.y);\n"
"#else\n"
"    int Dummy;\n"
"    SampledTexture.GetDimensions(0, LastMipDimension.x, LastMipDimension.y, Dummy);\n"
"    LastMipDimension.x = int(floor(float(LastMipDimension.x) / exp2(float(MipLevel))));\n"
"    LastMipDimension.y = int(floor(float(LastMipDimension.y) / exp2(float(MipLevel))));\n"
"    LastMipDimension.z = MipLevel;\n"
"#endif // SUPPORTED_SHADER_SRV\n"
"\n"
"    uint SampleCount = 0u;\n"
"    float SampledPixels[9];\n"
"    ArrayAppend(SampleFromTexture(SampledTexture, RemappedPosition, int2(0, 0), LastMipDimension), SampledPixels, SampleCount);\n"
"    ArrayAppend(SampleFromTexture(SampledTexture, RemappedPosition, int2(0, 1), LastMipDimension), SampledPixels, SampleCount);\n"
"    ArrayAppend(SampleFromTexture(SampledTexture, RemappedPosition, int2(1, 0), LastMipDimension), SampledPixels, SampleCount);\n"
"    ArrayAppend(SampleFromTexture(SampledTexture, RemappedPosition, int2(1, 1), LastMipDimension), SampledPixels, SampleCount);\n"
"\n"
"    bool IsWidthOdd  = (LastMipDimension.x & 1) != 0;\n"
"    bool IsHeightOdd = (LastMipDimension.y & 1) != 0;\n"
"\n"
"    if (IsWidthOdd)\n"
"    {\n"
"        ArrayAppend(SampleFromTexture(SampledTexture, RemappedPosition, int2(2, 0), LastMipDimension), SampledPixels, SampleCount);\n"
"        ArrayAppend(SampleFromTexture(SampledTexture, RemappedPosition, int2(2, 1), LastMipDimension), SampledPixels, SampleCount);\n"
"    }\n"
"\n"
"    if (IsHeightOdd)\n"
"    {\n"
"        ArrayAppend(SampleFromTexture(SampledTexture, RemappedPosition, int2(0, 2), LastMipDimension), SampledPixels, SampleCount);\n"
"        ArrayAppend(SampleFromTexture(SampledTexture, RemappedPosition, int2(1, 2), LastMipDimension), SampledPixels, SampleCount);\n"
"    }\n"
"\n"
"    if (IsWidthOdd && IsHeightOdd)\n"
"    {\n"
"        ArrayAppend(SampleFromTexture(SampledTexture, RemappedPosition, int2(2, 2), LastMipDimension), SampledPixels, SampleCount);\n"
"    }\n"
"\n"
"    return ComputeAverage(SampledPixels, SampleCount);\n"
"}\n"
"\n"
"PSOutput ComputeConvolutedDepthHistoryPS(in FullScreenTriangleVSOutput VSOut)\n"
"{\n"
"    int2 RemappedPosition = int2(2.0 * floor(VSOut.f4PixelPos.xy));\n"
"    int MipLevel = int(VSOut.uInstID);\n"
"\n"
"    PSOutput Output;\n"
"\n"
"#if SUPPORTED_SHADER_SRV\n"
"    Output.History = ComputeAverageForTexture(g_TextureHistoryLastMip, RemappedPosition, MipLevel);\n"
"    Output.Depth   = ComputeAverageForTexture(g_TextureDepthLastMip, RemappedPosition, MipLevel);\n"
"#else\n"
"    Output.History = ComputeAverageForTexture(g_TextureHistoryMips, RemappedPosition, MipLevel);\n"
"    Output.Depth   = ComputeAverageForTexture(g_TextureDepthMips, RemappedPosition, MipLevel);\n"
"#endif // SUPPORTED_SHADER_SRV\n"
"\n"
"    return Output;\n"
"}\n"
