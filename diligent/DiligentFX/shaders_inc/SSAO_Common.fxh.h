"#ifndef _SSAO_COMMON_FXH_\n"
"#define _SSAO_COMMON_FXH_\n"
"\n"
"#include \"PostFX_Common.fxh\"\n"
"\n"
"#if SSAO_OPTION_INVERTED_DEPTH\n"
"    #define MipConvFunc    max\n"
"    #define DepthFarPlane  0.0\n"
"    #define DepthNearPlane 1.0\n"
"#else\n"
"    #define MipConvFunc    min\n"
"    #define DepthFarPlane  1.0\n"
"    #define DepthNearPlane 0.0\n"
"#endif // SSAO_OPTION_INVERTED_DEPTH\n"
"\n"
"bool IsBackground(float Depth)\n"
"{\n"
"#if SSAO_OPTION_INVERTED_DEPTH\n"
"    return Depth < 1.e-6f;\n"
"#else\n"
"    return Depth >= (1.0f - 1.e-6f);\n"
"#endif // SSAO_OPTION_INVERTED_DEPTH\n"
"}\n"
"\n"
"float ComputeDepthWeight(float CenterDepth, float GuideDepth, float4x4 ProjMatrix, float Sigma)\n"
"{\n"
"    float LinearDepth0 = DepthToCameraZ(CenterDepth, ProjMatrix);\n"
"    float LinearDepth1 = DepthToCameraZ(GuideDepth, ProjMatrix);\n"
"    float Alpha = abs(LinearDepth0 - LinearDepth1) / LinearDepth0;\n"
"    return exp(-(Alpha * Alpha) / (2.0 * Sigma * Sigma));\n"
"}\n"
"\n"
"float ComputeGeometryWeight(float3 CenterPos, float3 TapPos, float3 CenterNormal, float PlaneDistanceNorm)\n"
"{\n"
"    return saturate(1.0 - abs(dot((TapPos - CenterPos), CenterNormal)) * PlaneDistanceNorm);\n"
"}\n"
"\n"
"#endif // _SSAO_COMMON_FXH_\n"
